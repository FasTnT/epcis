<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e8442c75-103e-45d1-bcbe-002abd14e3b1" activeEnvironment="Default" name="EPCIS 1.2 queries" resourceRoot="" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="c461197b-964e-453d-b9b4-d2ad388ed30d" wsaVersion="NONE" name="EPCISServiceBinding" type="wsdl" bindingName="{urn:epcglobal:epcis:wsdl:1}EPCISServiceBinding" soapVersion="1_1" anonymous="optional" definition="file:/C:/Users/louisaxel.ambroise/Downloads/EPCglobal-epcis-query-1_2.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:\C:\Users\louisaxel.ambroise\Downloads\EPCglobal-epcis-query-1_2.wsdl"><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\EPCglobal-epcis-query-1_2.wsdl</con:url><con:content><![CDATA[<!--EPCIS QUERY SERVICE DEFINITIONS-->
<wsdl:definitions targetNamespace="urn:epcglobal:epcis:wsdl:1" xmlns="http://schemas.xmlsoap.org/wsdl/" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:epcis="urn:epcglobal:epcis:xsd:1" xmlns:epcisq="urn:epcglobal:epcis-query:xsd:1" xmlns:epcglobal="urn:epcglobal:xsd:1" xmlns:impl="urn:epcglobal:epcis:wsdl:1" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:documentation>
    <epcglobal:copyright>Copyright (C) 2006-2016 GS1 AISBL, All Rights Reserved</epcglobal:copyright>
    <epcglobal:disclaimer>THIS DOCUMENT IS PROVIDED “AS IS” WITH NO WARRANTIES WHATSOEVER, INCLUDING ANY WARRANTY OF MERCHANTABILITY, NONINFRINGMENT, FITNESS FOR PARTICULAR PURPOSE, OR ANY WARRANTY OTHER WISE ARISING OUT OF THIS SPECIFICATION. GS1 disclaims all liability for any damages arising from use or misuse of this Standard, whether special, indirect, consequential, or compensatory damages, and including liability for infringement of any intellectual property rights, relating to use of information in or reliance upon this document.
GS1 retains the right to make changes to this document at any time, without notice. GS1 makes no warranty for the use of this document and assumes no responsibility for any errors which may appear in the document, nor does it make a commitment to update the information contained herein.</epcglobal:disclaimer>
    <epcglobal:specification></epcglobal:specification>
  </wsdl:documentation>
  <!--EPCISSERVICE TYPES-->
  <wsdl:types>
    <xsd:schema targetNamespace="urn:epcglobal:epcis:wsdl:1">
      <xsd:import namespace="urn:epcglobal:xsd:1" schemaLocation="EPCglobal.xsd"/>
      <xsd:import namespace="urn:epcglobal:epcis:xsd:1" schemaLocation="EPCglobal-epcis-1_2.xsd"/>
      <xsd:import namespace="urn:epcglobal:epcis-query:xsd:1" schemaLocation="EPCglobal-epcis-query-1_2.xsd"/>
    </xsd:schema>
  </wsdl:types>
  <!--EPCIS QUERY SERVICE MESSAGES-->
  <wsdl:message name="getQueryNamesRequest">
    <wsdl:part name="parms" element="epcisq:GetQueryNames"/>
  </wsdl:message>
  <wsdl:message name="getQueryNamesResponse">
    <wsdl:part name="getQueryNamesReturn" element="epcisq:GetQueryNamesResult"/>
  </wsdl:message>
  <wsdl:message name="subscribeRequest">
    <wsdl:part name="parms" element="epcisq:Subscribe"/>
  </wsdl:message>
  <wsdl:message name="subscribeResponse">
    <wsdl:part name="subscribeReturn" element="epcisq:SubscribeResult"/>
  </wsdl:message>
  <wsdl:message name="unsubscribeRequest">
    <wsdl:part name="parms" element="epcisq:Unsubscribe"/>
  </wsdl:message>
  <wsdl:message name="unsubscribeResponse">
    <wsdl:part name="unsubscribeReturn" element="epcisq:UnsubscribeResult"/>
  </wsdl:message>
  <wsdl:message name="getSubscriptionIDsRequest">
    <wsdl:part name="parms" element="epcisq:GetSubscriptionIDs"/>
  </wsdl:message>
  <wsdl:message name="getSubscriptionIDsResponse">
    <wsdl:part name="getSubscriptionIDsReturn" element="epcisq:GetSubscriptionIDsResult"/>
  </wsdl:message>
  <wsdl:message name="pollRequest">
    <wsdl:part name="parms" element="epcisq:Poll"/>
  </wsdl:message>
  <wsdl:message name="pollResponse">
    <wsdl:part name="pollReturn" element="epcisq:QueryResults"/>
  </wsdl:message>
  <wsdl:message name="getStandardVersionRequest">
    <wsdl:part name="parms" element="epcisq:GetStandardVersion"/>
  </wsdl:message>
  <wsdl:message name="getStandardVersionResponse">
    <wsdl:part name="getStandardVersionReturn" element="epcisq:GetStandardVersionResult"/>
  </wsdl:message>
  <wsdl:message name="getVendorVersionRequest">
    <wsdl:part name="parms" element="epcisq:GetVendorVersion"/>
  </wsdl:message>
  <wsdl:message name="getVendorVersionResponse">
    <wsdl:part name="getVendorVersionReturn" element="epcisq:GetVendorVersionResult"/>
  </wsdl:message>
  <!--EPCISSERVICE FAULT EXCEPTIONS-->
  <wsdl:message name="DuplicateNameExceptionResponse">
    <wsdl:part name="fault" element="epcisq:DuplicateNameException"/>
  </wsdl:message>
  <!--QueryValidationException not implemented in EPCIS 1.0
  <wsdl:message name="QueryValidationExceptionResponse">
      <wsdl:part name="fault" element="epcisq:QueryValidationException"/>
  </wsdl:message>-->
  <wsdl:message name="InvalidURIExceptionResponse">
    <wsdl:part name="fault" element="epcisq:InvalidURIException"/>
  </wsdl:message>
  <wsdl:message name="NoSuchNameExceptionResponse">
    <wsdl:part name="fault" element="epcisq:NoSuchNameException"/>
  </wsdl:message>
  <wsdl:message name="NoSuchSubscriptionExceptionResponse">
    <wsdl:part name="fault" element="epcisq:NoSuchSubscriptionException"/>
  </wsdl:message>
  <wsdl:message name="DuplicateSubscriptionExceptionResponse">
    <wsdl:part name="fault" element="epcisq:DuplicateSubscriptionException"/>
  </wsdl:message>
  <wsdl:message name="QueryParameterExceptionResponse">
    <wsdl:part name="fault" element="epcisq:QueryParameterException"/>
  </wsdl:message>
  <wsdl:message name="QueryTooLargeExceptionResponse">
    <wsdl:part name="fault" element="epcisq:QueryTooLargeException"/>
  </wsdl:message>
  <wsdl:message name="QueryTooComplexExceptionResponse">
    <wsdl:part name="fault" element="epcisq:QueryTooComplexException"/>
  </wsdl:message>
  <wsdl:message name="SubscriptionControlsExceptionResponse">
    <wsdl:part name="fault" element="epcisq:SubscriptionControlsException"/>
  </wsdl:message>
  <wsdl:message name="SubscribeNotPermittedExceptionResponse">
    <wsdl:part name="fault" element="epcisq:SubscribeNotPermittedException"/>
  </wsdl:message>
  <wsdl:message name="SecurityExceptionResponse">
    <wsdl:part name="fault" element="epcisq:SecurityException"/>
  </wsdl:message>
  <wsdl:message name="ValidationExceptionResponse">
    <wsdl:part name="fault" element="epcisq:ValidationException"/>
  </wsdl:message>
  <wsdl:message name="ImplementationExceptionResponse">
    <wsdl:part name="fault" element="epcisq:ImplementationException"/>
  </wsdl:message>
  <!--EPCISSERVICE PORTTYPE-->
  <wsdl:portType name="EPCISServicePortType">
    <wsdl:operation name="getQueryNames">
      <wsdl:input message="impl:getQueryNamesRequest" name="getQueryNamesRequest"/>
      <wsdl:output message="impl:getQueryNamesResponse" name="getQueryNamesResponse"/>
      <wsdl:fault message="impl:SecurityExceptionResponse" name="SecurityExceptionFault"/>
      <wsdl:fault message="impl:ValidationExceptionResponse" name="ValidationExceptionFault"/>
      <wsdl:fault message="impl:ImplementationExceptionResponse" name="ImplementationExceptionFault"/>
    </wsdl:operation>
    <wsdl:operation name="subscribe">
      <wsdl:input message="impl:subscribeRequest" name="subscribeRequest"/>
      <wsdl:output message="impl:subscribeResponse" name="subscribeResponse"/>
      <wsdl:fault message="impl:NoSuchNameExceptionResponse" name="NoSuchNameExceptionFault"/>
      <wsdl:fault message="impl:InvalidURIExceptionResponse" name="InvalidURIExceptionFault"/>
      <wsdl:fault message="impl:DuplicateSubscriptionExceptionResponse" name="DuplicateSubscriptionExceptionFault"/>
      <wsdl:fault message="impl:QueryParameterExceptionResponse" name="QueryParameterExceptionFault"/>
      <wsdl:fault message="impl:QueryTooComplexExceptionResponse" name="QueryTooComplexExceptionFault"/>
      <wsdl:fault message="impl:SubscriptionControlsExceptionResponse" name="SubscriptionControlsExceptionFault"/>
      <wsdl:fault message="impl:SubscribeNotPermittedExceptionResponse" name="SubscribeNotPermittedExceptionFault"/>
      <wsdl:fault message="impl:SecurityExceptionResponse" name="SecurityExceptionFault"/>
      <wsdl:fault message="impl:ValidationExceptionResponse" name="ValidationExceptionFault"/>
      <wsdl:fault message="impl:ImplementationExceptionResponse" name="ImplementationExceptionFault"/>
    </wsdl:operation>
    <wsdl:operation name="unsubscribe">
      <wsdl:input message="impl:unsubscribeRequest" name="unsubscribeRequest"/>
      <wsdl:output message="impl:unsubscribeResponse" name="unsubscribeResponse"/>
      <wsdl:fault message="impl:NoSuchSubscriptionExceptionResponse" name="NoSuchSubscriptionExceptionFault"/>
      <wsdl:fault message="impl:SecurityExceptionResponse" name="SecurityExceptionFault"/>
      <wsdl:fault message="impl:ValidationExceptionResponse" name="ValidationExceptionFault"/>
      <wsdl:fault message="impl:ImplementationExceptionResponse" name="ImplementationExceptionFault"/>
    </wsdl:operation>
    <wsdl:operation name="getSubscriptionIDs">
      <wsdl:input message="impl:getSubscriptionIDsRequest" name="getSubscriptionIDsRequest"/>
      <wsdl:output message="impl:getSubscriptionIDsResponse" name="getSubscriptionIDsResponse"/>
      <wsdl:fault message="impl:NoSuchNameExceptionResponse" name="NoSuchNameExceptionFault"/>
      <wsdl:fault message="impl:SecurityExceptionResponse" name="SecurityExceptionFault"/>
      <wsdl:fault message="impl:ValidationExceptionResponse" name="ValidationExceptionFault"/>
      <wsdl:fault message="impl:ImplementationExceptionResponse" name="ImplementationExceptionFault"/>
    </wsdl:operation>
    <wsdl:operation name="poll">
      <wsdl:input message="impl:pollRequest" name="pollRequest"/>
      <wsdl:output message="impl:pollResponse" name="pollResponse"/>
      <wsdl:fault message="impl:QueryParameterExceptionResponse" name="QueryParameterExceptionFault"/>
      <wsdl:fault message="impl:QueryTooLargeExceptionResponse" name="QueryTooLargeExceptionFault"/>
      <wsdl:fault message="impl:QueryTooComplexExceptionResponse" name="QueryTooComplexExceptionFault"/>
      <wsdl:fault message="impl:NoSuchNameExceptionResponse" name="NoSuchNameExceptionFault"/>
      <wsdl:fault message="impl:SecurityExceptionResponse" name="SecurityExceptionFault"/>
      <wsdl:fault message="impl:ValidationExceptionResponse" name="ValidationExceptionFault"/>
      <wsdl:fault message="impl:ImplementationExceptionResponse" name="ImplementationExceptionFault"/>
    </wsdl:operation>
    <wsdl:operation name="getStandardVersion">
      <wsdl:input message="impl:getStandardVersionRequest" name="getStandardVersionRequest"/>
      <wsdl:output message="impl:getStandardVersionResponse" name="getStandardVersionResponse"/>
      <wsdl:fault message="impl:SecurityExceptionResponse" name="SecurityExceptionFault"/>
      <wsdl:fault message="impl:ValidationExceptionResponse" name="ValidationExceptionFault"/>
      <wsdl:fault message="impl:ImplementationExceptionResponse" name="ImplementationExceptionFault"/>
    </wsdl:operation>
    <wsdl:operation name="getVendorVersion">
      <wsdl:input message="impl:getVendorVersionRequest" name="getVendorVersionRequest"/>
      <wsdl:output message="impl:getVendorVersionResponse" name="getVendorVersionResponse"/>
      <wsdl:fault message="impl:SecurityExceptionResponse" name="SecurityExceptionFault"/>
      <wsdl:fault message="impl:ValidationExceptionResponse" name="ValidationExceptionFault"/>
      <wsdl:fault message="impl:ImplementationExceptionResponse" name="ImplementationExceptionFault"/>
    </wsdl:operation>
  </wsdl:portType>
  <!--EPCISSERVICE BINDING-->
  <wsdl:binding name="EPCISServiceBinding" type="impl:EPCISServicePortType">
    <wsdlsoap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="getQueryNames">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getQueryNamesRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getQueryNamesResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SecurityExceptionFault">
        <wsdlsoap:fault name="SecurityExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ValidationExceptionFault">
        <wsdlsoap:fault name="ValidationExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ImplementationExceptionFault">
        <wsdlsoap:fault name="ImplementationExceptionFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="subscribe">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="subscribeRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="subscribeResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="NoSuchNameExceptionFault">
        <wsdlsoap:fault name="NoSuchNameExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="InvalidURIExceptionFault">
        <wsdlsoap:fault name="InvalidURIExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="DuplicateSubscriptionExceptionFault">
        <wsdlsoap:fault name="DuplicateSubscriptionExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="QueryParameterExceptionFault">
        <wsdlsoap:fault name="QueryParameterExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="QueryTooComplexExceptionFault">
        <wsdlsoap:fault name="QueryTooComplexExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SubscribeNotPermittedExceptionFault">
        <wsdlsoap:fault name="SubscribeNotPermittedExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SubscriptionControlsExceptionFault">
        <wsdlsoap:fault name="SubscriptionControlsExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SecurityExceptionFault">
        <wsdlsoap:fault name="SecurityExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ValidationExceptionFault">
        <wsdlsoap:fault name="ValidationExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ImplementationExceptionFault">
        <wsdlsoap:fault name="ImplementationExceptionFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="unsubscribe">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="unsubscribeRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="unsubscribeResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="NoSuchSubscriptionExceptionFault">
        <wsdlsoap:fault name="NoSuchSubscriptionExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SecurityExceptionFault">
        <wsdlsoap:fault name="SecurityExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ValidationExceptionFault">
        <wsdlsoap:fault name="ValidationExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ImplementationExceptionFault">
        <wsdlsoap:fault name="ImplementationExceptionFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getSubscriptionIDs">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getSubscriptionIDsRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getSubscriptionIDsResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="NoSuchNameExceptionFault">
        <wsdlsoap:fault name="NoSuchNameExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SecurityExceptionFault">
        <wsdlsoap:fault name="SecurityExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ValidationExceptionFault">
        <wsdlsoap:fault name="ValidationExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ImplementationExceptionFault">
        <wsdlsoap:fault name="ImplementationExceptionFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="poll">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="pollRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="pollResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="QueryParameterExceptionFault">
        <wsdlsoap:fault name="QueryParameterExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="QueryTooComplexExceptionFault">
        <wsdlsoap:fault name="QueryTooComplexExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="QueryTooLargeExceptionFault">
        <wsdlsoap:fault name="QueryTooLargeExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="NoSuchNameExceptionFault">
        <wsdlsoap:fault name="NoSuchNameExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="SecurityExceptionFault">
        <wsdlsoap:fault name="SecurityExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ValidationExceptionFault">
        <wsdlsoap:fault name="ValidationExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ImplementationExceptionFault">
        <wsdlsoap:fault name="ImplementationExceptionFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getStandardVersion">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getStandardVersionRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getStandardVersionResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SecurityExceptionFault">
        <wsdlsoap:fault name="SecurityExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ValidationExceptionFault">
        <wsdlsoap:fault name="ValidationExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ImplementationExceptionFault">
        <wsdlsoap:fault name="ImplementationExceptionFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
    <wsdl:operation name="getVendorVersion">
      <wsdlsoap:operation soapAction=""/>
      <wsdl:input name="getVendorVersionRequest">
        <wsdlsoap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="getVendorVersionResponse">
        <wsdlsoap:body use="literal"/>
      </wsdl:output>
      <wsdl:fault name="SecurityExceptionFault">
        <wsdlsoap:fault name="SecurityExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ValidationExceptionFault">
        <wsdlsoap:fault name="ValidationExceptionFault" use="literal"/>
      </wsdl:fault>
      <wsdl:fault name="ImplementationExceptionFault">
        <wsdlsoap:fault name="ImplementationExceptionFault" use="literal"/>
      </wsdl:fault>
    </wsdl:operation>
  </wsdl:binding>
  <!--EPCISSERVICE-->
  <wsdl:service name="EPCglobalEPCISService">
    <wsdl:port binding="impl:EPCISServiceBinding" name="EPCglobalEPCISServicePort">
      <!--The address shown below is an example; an implementation MAY specify
         any port it wishes-->
      <wsdlsoap:address location="http://localhost:6060/axis/services/EPCglobalEPCISService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\EPCglobal.xsd</con:url><con:content><![CDATA[<xsd:schema targetNamespace="urn:epcglobal:xsd:1" elementFormDefault="unqualified" attributeFormDefault="unqualified" version="1.0" xmlns:epcglobal="urn:epcglobal:xsd:1" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:annotation>
    <xsd:documentation>
      <epcglobal:copyright>Copyright (C) 2004 Epcglobal Inc., All Rights Reserved.</epcglobal:copyright>
      <epcglobal:disclaimer>EPCglobal Inc., its members, officers, directors, employees, or agents shall not be liable for any injury, loss, damages, financial or otherwise, arising from, related to, or caused by the use of this document.  The use of said document shall constitute your express consent to the foregoing exculpation.</epcglobal:disclaimer>
      <epcglobal:specification>EPCglobal common components Version 1.0</epcglobal:specification>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:complexType name="Document" abstract="true">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">EPCglobal document properties for all messages.</xsd:documentation>
    </xsd:annotation>
    <xsd:attribute name="schemaVersion" type="xsd:decimal" use="required">
      <xsd:annotation>
        <xsd:documentation xml:lang="en">The version of the schema corresponding to which the instance conforms.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="creationDate" type="xsd:dateTime" use="required">
      <xsd:annotation>
        <xsd:documentation xml:lang="en">The date the message was created. Used for auditing and logging.</xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
  </xsd:complexType>
  <xsd:complexType name="EPC">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">EPC represents the Electronic Product Code.</xsd:documentation>
    </xsd:annotation>
    <xsd:simpleContent>
      <xsd:extension base="xsd:string"/>
    </xsd:simpleContent>
  </xsd:complexType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\EPCglobal-epcis-1_2.xsd</con:url><con:content><![CDATA[<xsd:schema targetNamespace="urn:epcglobal:epcis:xsd:1" elementFormDefault="unqualified" attributeFormDefault="unqualified" version="1.2" xmlns:epcis="urn:epcglobal:epcis:xsd:1" xmlns:sbdh="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" xmlns:epcglobal="urn:epcglobal:xsd:1" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      <epcglobal:copyright>Copyright (C) 2006-2016 GS1 AISBL, All Rights Reserved.</epcglobal:copyright>
      <epcglobal:disclaimer>THIS DOCUMENT IS PROVIDED “AS IS” WITH NO WARRANTIES WHATSOEVER, INCLUDING ANY WARRANTY OF MERCHANTABILITY, NONINFRINGMENT, FITNESS FOR PARTICULAR PURPOSE, OR ANY WARRANTY OTHER WISE ARISING OUT OF THIS SPECIFICATION. GS1 disclaims all liability for any damages arising from use or misuse of this Standard, whether special, indirect, consequential, or compensatory damages, and including liability for infringement of any intellectual property rights, relating to use of information in or reliance upon this document.

GS1 retains the right to make changes to this document at any time, without notice. GS1 makes no warranty for the use of this document and assumes no responsibility for any errors which may appear in the document, nor does it make a commitment to update the information contained herein.</epcglobal:disclaimer>
      <epcglobal:specification>EPC INFORMATION SERVICE (EPCIS) Version 1.2</epcglobal:specification>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:import namespace="urn:epcglobal:xsd:1" schemaLocation="./EPCglobal.xsd"/>
  <xsd:import namespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" schemaLocation="./StandardBusinessDocumentHeader.xsd"/>
  <!--EPCIS CORE ELEMENTS-->
  <xsd:element name="EPCISDocument" type="epcis:EPCISDocumentType"/>
  <xsd:complexType name="EPCISDocumentType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">document that contains a Header and a Body.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="epcglobal:Document">
        <xsd:sequence>
          <xsd:element name="EPCISHeader" type="epcis:EPCISHeaderType" minOccurs="0"/>
          <xsd:element name="EPCISBody" type="epcis:EPCISBodyType"/>
          <xsd:element name="extension" type="epcis:EPCISDocumentExtensionType" minOccurs="0"/>
          <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:anyAttribute processContents="lax"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EPCISDocumentExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCISHeaderType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">specific header(s) including the Standard Business Document Header.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element ref="sbdh:StandardBusinessDocumentHeader"/>
      <xsd:element name="extension" type="epcis:EPCISHeaderExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCISHeaderExtensionType">
    <xsd:sequence>
      <xsd:element name="EPCISMasterData" type="epcis:EPCISMasterDataType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:EPCISHeaderExtension2Type" minOccurs="0"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCISHeaderExtension2Type">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--Since 1.2-->
  <xsd:complexType name="EPCISMasterDataType">
    <xsd:sequence>
      <xsd:element name="VocabularyList" type="epcis:VocabularyListType"/>
      <xsd:element name="extension" type="epcis:EPCISMasterDataExtensionType" minOccurs="0"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="EPCISMasterDataExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <!--MasterData CORE ELEMENT TYPES-->
  <xsd:complexType name="VocabularyListType">
    <xsd:sequence>
      <xsd:element name="Vocabulary" type="epcis:VocabularyType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="VocabularyType">
    <xsd:sequence>
      <xsd:element name="VocabularyElementList" type="epcis:VocabularyElementListType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:VocabularyExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="type" type="xsd:anyURI" use="required"/>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="VocabularyElementListType">
    <xsd:sequence>
      <xsd:element name="VocabularyElement" type="epcis:VocabularyElementType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <!--Implementations SHALL treat a <children list containing zero elements
       in the same way as if the <children> element were omitted altogether.-->
  <xsd:complexType name="VocabularyElementType">
    <xsd:sequence>
      <xsd:element name="attribute" type="epcis:AttributeType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="children" type="epcis:IDListType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:VocabularyElementExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:attribute name="id" type="xsd:anyURI" use="required"/>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="AttributeType">
    <xsd:complexContent mixed="true">
      <xsd:extension base="xsd:anyType">
        <xsd:attribute name="id" type="xsd:anyURI" use="required"/>
        <xsd:anyAttribute processContents="lax"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="IDListType">
    <xsd:sequence>
      <xsd:element name="id" type="xsd:anyURI" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="VocabularyExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="VocabularyElementExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCISBodyType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">specific body that contains EPCIS related Events.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="EventList" type="epcis:EventListType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:EPCISBodyExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCISBodyExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--EPCIS CORE ELEMENT TYPES-->
  <xsd:complexType name="EventListType">
    <xsd:choice minOccurs="0" maxOccurs="unbounded">
      <xsd:element name="ObjectEvent" type="epcis:ObjectEventType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="AggregationEvent" type="epcis:AggregationEventType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="QuantityEvent" type="epcis:QuantityEventType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="TransactionEvent" type="epcis:TransactionEventType" minOccurs="0" maxOccurs="unbounded"/>
      <xsd:element name="extension" type="epcis:EPCISEventListExtensionType"/>
      <xsd:any namespace="##other" processContents="lax"/>
    </xsd:choice>
    <!--Note: the use of "unbounded" in both the xsd:choice element
                    and the enclosed xsd:element elements is, strictly speaking,
                    redundant. However, this was found to avoid problems with
                    certain XML processing tools, and so is retained here.-->
  </xsd:complexType>
  <!--Modified in 1.1-->
  <xsd:complexType name="EPCISEventListExtensionType">
    <xsd:choice>
      <xsd:element name="TransformationEvent" type="epcis:TransformationEventType"/>
      <xsd:element name="extension" type="epcis:EPCISEventListExtension2Type"/>
    </xsd:choice>
  </xsd:complexType>
  <!--Since 1.1-->
  <xsd:complexType name="EPCISEventListExtension2Type">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCListType">
    <xsd:sequence>
      <xsd:element name="epc" type="epcglobal:EPC" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:simpleType name="ActionType">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="ADD"/>
      <xsd:enumeration value="OBSERVE"/>
      <xsd:enumeration value="DELETE"/>
    </xsd:restriction>
  </xsd:simpleType>
  <xsd:simpleType name="ParentIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Standard Vocabulary-->
  <xsd:simpleType name="BusinessStepIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Standard Vocabulary-->
  <xsd:simpleType name="DispositionIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--User Vocabulary-->
  <xsd:simpleType name="EPCClassType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Standard Vocabulary-->
  <!--Since 1.1-->
  <xsd:simpleType name="UOMType">
    <xsd:restriction base="xsd:string"/>
  </xsd:simpleType>
  <!--Since 1.1-->
  <xsd:complexType name="QuantityElementType">
    <xsd:sequence>
      <xsd:element name="epcClass" type="epcis:EPCClassType"/>
      <xsd:sequence minOccurs="0">
        <xsd:element name="quantity" type="xsd:decimal"/>
        <xsd:element name="uom" type="epcis:UOMType" minOccurs="0"/>
      </xsd:sequence>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="QuantityListType">
    <xsd:sequence>
      <xsd:element name="quantityElement" type="epcis:QuantityElementType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <!--User Vocabulary-->
  <xsd:simpleType name="ReadPointIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <xsd:complexType name="ReadPointType">
    <xsd:sequence>
      <xsd:element name="id" type="epcis:ReadPointIDType"/>
      <xsd:element name="extension" type="epcis:ReadPointExtensionType" minOccurs="0"/>
      <!--The wildcard below provides the extension mechanism described in Section 9.4-->
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="ReadPointExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--User Vocabulary-->
  <xsd:simpleType name="BusinessLocationIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <xsd:complexType name="BusinessLocationType">
    <xsd:sequence>
      <xsd:element name="id" type="epcis:BusinessLocationIDType"/>
      <xsd:element name="extension" type="epcis:BusinessLocationExtensionType" minOccurs="0"/>
      <!--The wildcard below provides the extension mechanism described in Section 9.4-->
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="BusinessLocationExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--User Vocabulary-->
  <xsd:simpleType name="BusinessTransactionIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Standard Vocabulary-->
  <xsd:simpleType name="BusinessTransactionTypeIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <xsd:complexType name="BusinessTransactionType">
    <xsd:simpleContent>
      <xsd:extension base="epcis:BusinessTransactionIDType">
        <xsd:attribute name="type" type="epcis:BusinessTransactionTypeIDType" use="optional"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="BusinessTransactionListType">
    <xsd:sequence>
      <xsd:element name="bizTransaction" type="epcis:BusinessTransactionType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <!--User Vocabulary-->
  <!--Since 1.1-->
  <xsd:simpleType name="SourceDestIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Standard Vocabulary-->
  <!--Since 1.1-->
  <xsd:simpleType name="SourceDestTypeIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Since 1.1-->
  <xsd:complexType name="SourceDestType">
    <xsd:simpleContent>
      <xsd:extension base="epcis:SourceDestIDType">
        <xsd:attribute name="type" type="epcis:SourceDestTypeIDType" use="required"/>
      </xsd:extension>
    </xsd:simpleContent>
  </xsd:complexType>
  <xsd:complexType name="SourceListType">
    <xsd:sequence>
      <xsd:element name="source" type="epcis:SourceDestType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="DestinationListType">
    <xsd:sequence>
      <xsd:element name="destination" type="epcis:SourceDestType" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <!--User Vocabulary-->
  <!--Since 1.1-->
  <xsd:simpleType name="TransformationIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Since 1.1-->
  <xsd:complexType name="ILMDType">
    <xsd:sequence>
      <xsd:element name="extension" type="epcis:ILMDExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="ILMDExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--User Vocabulary-->
  <!--Since 1.2-->
  <xsd:simpleType name="EventIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Standard Vocabulary-->
  <!--Since 1.2-->
  <xsd:simpleType name="ErrorReasonIDType">
    <xsd:restriction base="xsd:anyURI"/>
  </xsd:simpleType>
  <!--Since 1.2-->
  <xsd:complexType name="CorrectiveEventIDsType">
    <xsd:sequence>
      <xsd:element name="correctiveEventID" type="epcis:EventIDType" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <!--Since 1.2-->
  <xsd:complexType name="ErrorDeclarationType">
    <xsd:sequence>
      <xsd:element name="declarationTime" type="xsd:dateTime"/>
      <xsd:element name="reason" type="epcis:ErrorReasonIDType" minOccurs="0"/>
      <xsd:element name="correctiveEventIDs" type="epcis:CorrectiveEventIDsType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:ErrorDeclarationExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="ErrorDeclarationExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--items listed alphabetically by name-->
  <!--Some element types accommodate extensibility in the manner of
        "Versioning XML Vocabularies" by David Orchard (see
        http://www.xml.com/pub/a/2003/12/03/versioning.html).

        In this approach, an optional <extension> element is defined
        for each extensible element type, where an <extension> element
        may contain future elements defined in the target namespace.

        In addition to the optional <extension> element, extensible element
        types are declared with a final xsd:any wildcard to accommodate
        future elements defined by third parties (as denoted by the ##other
        namespace).

        Finally, the xsd:anyAttribute facility is used to allow arbitrary
        attributes to be added to extensible element types.-->
  <xsd:complexType name="EPCISEventType" abstract="true">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">base type for all EPCIS events.</xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="eventTime" type="xsd:dateTime"/>
      <xsd:element name="recordTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="eventTimeZoneOffset" type="xsd:string"/>
      <xsd:element name="baseExtension" type="epcis:EPCISEventExtensionType" minOccurs="0"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCISEventExtensionType">
    <xsd:sequence>
      <xsd:element name="eventID" type="epcis:EventIDType" minOccurs="0"/>
      <xsd:element name="errorDeclaration" type="epcis:ErrorDeclarationType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:EPCISEventExtension2Type" minOccurs="0"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCISEventExtension2Type">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="ObjectEventType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">Object Event captures information about an event pertaining to one or more
      objects identified by EPCs.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="epcis:EPCISEventType">
        <xsd:sequence>
          <xsd:element name="epcList" type="epcis:EPCListType"/>
          <xsd:element name="action" type="epcis:ActionType"/>
          <xsd:element name="bizStep" type="epcis:BusinessStepIDType" minOccurs="0"/>
          <xsd:element name="disposition" type="epcis:DispositionIDType" minOccurs="0"/>
          <xsd:element name="readPoint" type="epcis:ReadPointType" minOccurs="0"/>
          <xsd:element name="bizLocation" type="epcis:BusinessLocationType" minOccurs="0"/>
          <xsd:element name="bizTransactionList" type="epcis:BusinessTransactionListType" minOccurs="0"/>
          <xsd:element name="extension" type="epcis:ObjectEventExtensionType" minOccurs="0"/>
          <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:anyAttribute processContents="lax"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!--Modified in 1.1-->
  <xsd:complexType name="ObjectEventExtensionType">
    <xsd:sequence>
      <xsd:element name="quantityList" type="epcis:QuantityListType" minOccurs="0"/>
      <xsd:element name="sourceList" type="epcis:SourceListType" minOccurs="0"/>
      <xsd:element name="destinationList" type="epcis:DestinationListType" minOccurs="0"/>
      <xsd:element name="ilmd" type="epcis:ILMDType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:ObjectEventExtension2Type" minOccurs="0"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--Since 1.1-->
  <xsd:complexType name="ObjectEventExtension2Type">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="AggregationEventType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">Aggregation Event captures an event that applies to objects that
      have a physical association with one another.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="epcis:EPCISEventType">
        <xsd:sequence>
          <xsd:element name="parentID" type="epcis:ParentIDType" minOccurs="0"/>
          <xsd:element name="childEPCs" type="epcis:EPCListType"/>
          <xsd:element name="action" type="epcis:ActionType"/>
          <xsd:element name="bizStep" type="epcis:BusinessStepIDType" minOccurs="0"/>
          <xsd:element name="disposition" type="epcis:DispositionIDType" minOccurs="0"/>
          <xsd:element name="readPoint" type="epcis:ReadPointType" minOccurs="0"/>
          <xsd:element name="bizLocation" type="epcis:BusinessLocationType" minOccurs="0"/>
          <xsd:element name="bizTransactionList" type="epcis:BusinessTransactionListType" minOccurs="0"/>
          <xsd:element name="extension" type="epcis:AggregationEventExtensionType" minOccurs="0"/>
          <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:anyAttribute processContents="lax"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!--Modified in 1.1-->
  <xsd:complexType name="AggregationEventExtensionType">
    <xsd:sequence>
      <xsd:element name="childQuantityList" type="epcis:QuantityListType" minOccurs="0"/>
      <xsd:element name="sourceList" type="epcis:SourceListType" minOccurs="0"/>
      <xsd:element name="destinationList" type="epcis:DestinationListType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:AggregationEventExtension2Type" minOccurs="0"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--Since 1.1-->
  <xsd:complexType name="AggregationEventExtension2Type">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="QuantityEventType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">Quantity Event captures an event that takes place with respect to a specified quantity of
      object class.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="epcis:EPCISEventType">
        <xsd:sequence>
          <xsd:element name="epcClass" type="epcis:EPCClassType"/>
          <xsd:element name="quantity" type="xsd:int"/>
          <xsd:element name="bizStep" type="epcis:BusinessStepIDType" minOccurs="0"/>
          <xsd:element name="disposition" type="epcis:DispositionIDType" minOccurs="0"/>
          <xsd:element name="readPoint" type="epcis:ReadPointType" minOccurs="0"/>
          <xsd:element name="bizLocation" type="epcis:BusinessLocationType" minOccurs="0"/>
          <xsd:element name="bizTransactionList" type="epcis:BusinessTransactionListType" minOccurs="0"/>
          <xsd:element name="extension" type="epcis:QuantityEventExtensionType" minOccurs="0"/>
          <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:anyAttribute processContents="lax"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="QuantityEventExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="TransactionEventType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">Transaction Event describes the association or disassociation of physical objects to one or more business
      transactions.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="epcis:EPCISEventType">
        <xsd:sequence>
          <xsd:element name="bizTransactionList" type="epcis:BusinessTransactionListType"/>
          <xsd:element name="parentID" type="epcis:ParentIDType" minOccurs="0"/>
          <xsd:element name="epcList" type="epcis:EPCListType"/>
          <xsd:element name="action" type="epcis:ActionType"/>
          <xsd:element name="bizStep" type="epcis:BusinessStepIDType" minOccurs="0"/>
          <xsd:element name="disposition" type="epcis:DispositionIDType" minOccurs="0"/>
          <xsd:element name="readPoint" type="epcis:ReadPointType" minOccurs="0"/>
          <xsd:element name="bizLocation" type="epcis:BusinessLocationType" minOccurs="0"/>
          <xsd:element name="extension" type="epcis:TransactionEventExtensionType" minOccurs="0"/>
          <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:anyAttribute processContents="lax"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!--Modified in 1.1-->
  <xsd:complexType name="TransactionEventExtensionType">
    <xsd:sequence>
      <xsd:element name="quantityList" type="epcis:QuantityListType" minOccurs="0"/>
      <xsd:element name="sourceList" type="epcis:SourceListType" minOccurs="0"/>
      <xsd:element name="destinationList" type="epcis:DestinationListType" minOccurs="0"/>
      <xsd:element name="extension" type="epcis:TransactionEventExtension2Type" minOccurs="0"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--Since 1.1-->
  <xsd:complexType name="TransactionEventExtension2Type">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <!--Since 1.1-->
  <xsd:complexType name="TransformationEventType">
    <xsd:annotation>
      <xsd:documentation xml:lang="en">Transformation Event captures an event in which inputs are consumed
      and outputs are produced</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="epcis:EPCISEventType">
        <xsd:sequence>
          <xsd:element name="inputEPCList" type="epcis:EPCListType" minOccurs="0"/>
          <xsd:element name="inputQuantityList" type="epcis:QuantityListType" minOccurs="0"/>
          <xsd:element name="outputEPCList" type="epcis:EPCListType" minOccurs="0"/>
          <xsd:element name="outputQuantityList" type="epcis:QuantityListType" minOccurs="0"/>
          <xsd:element name="transformationID" type="epcis:TransformationIDType" minOccurs="0"/>
          <xsd:element name="bizStep" type="epcis:BusinessStepIDType" minOccurs="0"/>
          <xsd:element name="disposition" type="epcis:DispositionIDType" minOccurs="0"/>
          <xsd:element name="readPoint" type="epcis:ReadPointType" minOccurs="0"/>
          <xsd:element name="bizLocation" type="epcis:BusinessLocationType" minOccurs="0"/>
          <xsd:element name="bizTransactionList" type="epcis:BusinessTransactionListType" minOccurs="0"/>
          <xsd:element name="sourceList" type="epcis:SourceListType" minOccurs="0"/>
          <xsd:element name="destinationList" type="epcis:DestinationListType" minOccurs="0"/>
          <xsd:element name="ilmd" type="epcis:ILMDType" minOccurs="0"/>
          <xsd:element name="extension" type="epcis:TransformationEventExtensionType" minOccurs="0"/>
          <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:anyAttribute processContents="lax"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!--Since 1.1-->
  <xsd:complexType name="TransformationEventExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\StandardBusinessDocumentHeader.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader">
  <xs:include schemaLocation="DocumentIdentification.xsd"/>
  <xs:include schemaLocation="Partner.xsd"/>
  <xs:include schemaLocation="Manifest.xsd"/>
  <xs:include schemaLocation="BusinessScope.xsd"/>
  <xs:complexType name="StandardBusinessDocumentHeader">
    <xs:sequence>
      <xs:element name="HeaderVersion" type="xs:string"/>
      <xs:element name="Sender" type="Partner" maxOccurs="unbounded"/>
      <xs:element name="Receiver" type="Partner" maxOccurs="unbounded"/>
      <xs:element name="DocumentIdentification" type="DocumentIdentification"/>
      <xs:element name="Manifest" type="Manifest" minOccurs="0"/>
      <xs:element name="BusinessScope" type="BusinessScope" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="StandardBusinessDocumentHeader" type="StandardBusinessDocumentHeader"/>
  <xs:element name="StandardBusinessDocument" type="StandardBusinessDocument"/>
  <xs:complexType name="StandardBusinessDocument">
    <xs:sequence>
      <xs:element ref="StandardBusinessDocumentHeader" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\DocumentIdentification.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader">
  <xs:complexType name="DocumentIdentification">
    <xs:sequence>
      <xs:element name="Standard" type="xs:string"/>
      <xs:element name="TypeVersion" type="xs:string"/>
      <xs:element name="InstanceIdentifier" type="xs:string"/>
      <xs:element name="Type" type="xs:string"/>
      <xs:element name="MultipleType" type="xs:boolean" minOccurs="0"/>
      <xs:element name="CreationDateAndTime" type="xs:dateTime"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\Partner.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader">
  <xs:complexType name="Partner">
    <xs:sequence>
      <xs:element name="Identifier" type="PartnerIdentification"/>
      <xs:element name="ContactInformation" type="ContactInformation" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PartnerIdentification">
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="Authority" type="xs:string"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="ContactInformation">
    <xs:sequence>
      <xs:element name="Contact" type="xs:string"/>
      <xs:element name="EmailAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="FaxNumber" type="xs:string" minOccurs="0"/>
      <xs:element name="TelephoneNumber" type="xs:string" minOccurs="0"/>
      <xs:element name="ContactTypeIdentifier" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\Manifest.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader">
  <xs:include schemaLocation="BasicTypes.xsd"/>
  <xs:complexType name="Manifest">
    <xs:sequence>
      <xs:element name="NumberOfItems" type="xs:integer"/>
      <xs:element name="ManifestItem" type="ManifestItem" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ManifestItem">
    <xs:sequence>
      <xs:element name="MimeTypeQualifierCode" type="MimeTypeQualifier"/>
      <xs:element name="UniformResourceIdentifier" type="xs:anyURI"/>
      <xs:element name="Description" type="xs:string" minOccurs="0"/>
      <xs:element name="LanguageCode" type="Language" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\BasicTypes.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader">
  <xs:simpleType name="MimeTypeQualifier">
    <xs:annotation>
      <xs:documentation>The MIME type as defined by IANA. Please refer to
            http://www.iana.org/assignments/media-types/ for a list of types.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="Language">
    <xs:annotation>
      <xs:documentation>ISO 639-2; 1998 representation of Language name. Refer to http://www.loc.gov/standards/iso639-2/iso639jac.html to get the latest version of the standard.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\BusinessScope.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader" elementFormDefault="qualified" attributeFormDefault="unqualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.unece.org/cefact/namespaces/StandardBusinessDocumentHeader">
  <xs:complexType name="BusinessScope">
    <xs:sequence>
      <xs:element name="Scope" type="Scope" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="Scope">
    <xs:sequence>
      <xs:group ref="ScopeAttributes"/>
      <xs:element ref="ScopeInformation" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:group name="ScopeAttributes">
    <xs:sequence>
      <xs:element name="Type" type="xs:string"/>
      <xs:element name="InstanceIdentifier" type="xs:string"/>
      <xs:element name="Identifier" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:group>
  <xs:element name="ScopeInformation" type="xs:anyType" abstract="true"/>
  <xs:element name="CorrelationInformation" type="CorrelationInformation" substitutionGroup="ScopeInformation"/>
  <xs:complexType name="CorrelationInformation">
    <xs:sequence>
      <xs:element name="RequestingDocumentCreationDateTime" type="xs:dateTime" minOccurs="0"/>
      <xs:element name="RequestingDocumentInstanceIdentifier" type="xs:string" minOccurs="0"/>
      <xs:element name="ExpectedResponseDateTime" type="xs:dateTime" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:element name="BusinessService" type="BusinessService" substitutionGroup="ScopeInformation"/>
  <xs:complexType name="BusinessService">
    <xs:sequence>
      <xs:element name="BusinessServiceName" type="xs:string" minOccurs="0"/>
      <xs:element name="ServiceTransaction" type="ServiceTransaction" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ServiceTransaction">
    <xs:attribute name="TypeOfServiceTransaction" type="TypeOfServiceTransaction" use="optional"/>
    <xs:attribute name="IsNonRepudiationRequired" type="xs:string"/>
    <xs:attribute name="IsAuthenticationRequired" type="xs:string"/>
    <xs:attribute name="IsNonRepudiationOfReceiptRequired" type="xs:string"/>
    <xs:attribute name="IsIntegrityCheckRequired" type="xs:string"/>
    <xs:attribute name="IsApplicationErrorResponseRequested" type="xs:string"/>
    <xs:attribute name="TimeToAcknowledgeReceipt" type="xs:string"/>
    <xs:attribute name="TimeToAcknowledgeAcceptance" type="xs:string"/>
    <xs:attribute name="TimeToPerform" type="xs:string"/>
    <xs:attribute name="Recurrence" type="xs:string"/>
  </xs:complexType>
  <xs:simpleType name="TypeOfServiceTransaction">
    <xs:restriction base="xs:string">
      <xs:enumeration value="RequestingServiceTransaction"/>
      <xs:enumeration value="RespondingServiceTransaction"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:\C:\Users\louisaxel.ambroise\Downloads\EPCglobal-epcis-query-1_2.xsd</con:url><con:content><![CDATA[<xsd:schema targetNamespace="urn:epcglobal:epcis-query:xsd:1" elementFormDefault="unqualified" attributeFormDefault="unqualified" version="1.2" xmlns:epcis="urn:epcglobal:epcis:xsd:1" xmlns:epcismd="urn:epcglobal:epcis-masterdata:xsd:1" xmlns:epcisq="urn:epcglobal:epcis-query:xsd:1" xmlns:epcglobal="urn:epcglobal:xsd:1" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:annotation>
    <xsd:documentation xml:lang="en">
      <epcglobal:copyright>Copyright (C) 2006-2016 GS1 AISBL, All Rights Reserved</epcglobal:copyright>
      <epcglobal:disclaimer>THIS DOCUMENT IS PROVIDED “AS IS” WITH NO WARRANTIES WHATSOEVER, INCLUDING ANY WARRANTY OF MERCHANTABILITY, NONINFRINGMENT, FITNESS FOR PARTICULAR PURPOSE, OR ANY WARRANTY OTHER WISE ARISING OUT OF THIS SPECIFICATION. GS1 disclaims all liability for any damages arising from use or misuse of this Standard, whether special, indirect, consequential, or compensatory damages, and including liability for infringement of any intellectual property rights, relating to use of information in or reliance upon this document.
GS1 retains the right to make changes to this document at any time, without notice. GS1 makes no warranty for the use of this document and assumes no responsibility for any errors which may appear in the document, nor does it make a commitment to update the information contained herein.</epcglobal:disclaimer>
      <epcglobal:specification>EPCIS Query 1.2</epcglobal:specification>
    </xsd:documentation>
  </xsd:annotation>
  <xsd:import namespace="urn:epcglobal:xsd:1" schemaLocation="./EPCglobal.xsd"/>
  <xsd:import namespace="urn:epcglobal:epcis:xsd:1" schemaLocation="./EPCglobal-epcis-1_2.xsd"/>
  <xsd:element name="EPCISQueryDocument" type="epcisq:EPCISQueryDocumentType"/>
  <xsd:complexType name="EPCISQueryDocumentType">
    <xsd:complexContent>
      <xsd:extension base="epcglobal:Document">
        <xsd:sequence>
          <xsd:element name="EPCISHeader" type="epcis:EPCISHeaderType" minOccurs="0"/>
          <xsd:element name="EPCISBody" type="epcisq:EPCISQueryBodyType"/>
          <xsd:element name="extension" type="epcisq:EPCISQueryDocumentExtensionType" minOccurs="0"/>
          <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:anyAttribute processContents="lax"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="EPCISQueryDocumentExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="EPCISQueryBodyType">
    <xsd:choice>
      <xsd:element ref="epcisq:GetQueryNames"/>
      <xsd:element ref="epcisq:GetQueryNamesResult"/>
      <xsd:element ref="epcisq:Subscribe"/>
      <xsd:element ref="epcisq:SubscribeResult"/>
      <xsd:element ref="epcisq:Unsubscribe"/>
      <xsd:element ref="epcisq:UnsubscribeResult"/>
      <xsd:element ref="epcisq:GetSubscriptionIDs"/>
      <xsd:element ref="epcisq:GetSubscriptionIDsResult"/>
      <xsd:element ref="epcisq:Poll"/>
      <xsd:element ref="epcisq:GetStandardVersion"/>
      <xsd:element ref="epcisq:GetStandardVersionResult"/>
      <xsd:element ref="epcisq:GetVendorVersion"/>
      <xsd:element ref="epcisq:GetVendorVersionResult"/>
      <xsd:element ref="epcisq:DuplicateNameException"/>
      <!--queryValidationException unimplemented in EPCIS 1.0
        <xsd:element ref="epcisq:QueryValidationException"/>-->
      <xsd:element ref="epcisq:InvalidURIException"/>
      <xsd:element ref="epcisq:NoSuchNameException"/>
      <xsd:element ref="epcisq:NoSuchSubscriptionException"/>
      <xsd:element ref="epcisq:DuplicateSubscriptionException"/>
      <xsd:element ref="epcisq:QueryParameterException"/>
      <xsd:element ref="epcisq:QueryTooLargeException"/>
      <xsd:element ref="epcisq:QueryTooComplexException"/>
      <xsd:element ref="epcisq:SubscriptionControlsException"/>
      <xsd:element ref="epcisq:SubscribeNotPermittedException"/>
      <xsd:element ref="epcisq:SecurityException"/>
      <xsd:element ref="epcisq:ValidationException"/>
      <xsd:element ref="epcisq:ImplementationException"/>
      <xsd:element ref="epcisq:QueryResults"/>
    </xsd:choice>
  </xsd:complexType>
  <!--EPCISSERVICE MESSAGE WRAPPERS-->
  <xsd:element name="GetQueryNames" type="epcisq:EmptyParms"/>
  <xsd:element name="GetQueryNamesResult" type="epcisq:ArrayOfString"/>
  <xsd:element name="Subscribe" type="epcisq:Subscribe"/>
  <xsd:complexType name="Subscribe">
    <xsd:sequence>
      <xsd:element name="queryName" type="xsd:string"/>
      <xsd:element name="params" type="epcisq:QueryParams"/>
      <xsd:element name="dest" type="xsd:anyURI"/>
      <xsd:element name="controls" type="epcisq:SubscriptionControls"/>
      <xsd:element name="subscriptionID" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="SubscribeResult" type="epcisq:VoidHolder"/>
  <xsd:element name="Unsubscribe" type="epcisq:Unsubscribe"/>
  <xsd:complexType name="Unsubscribe">
    <xsd:sequence>
      <xsd:element name="subscriptionID" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="UnsubscribeResult" type="epcisq:VoidHolder"/>
  <xsd:element name="GetSubscriptionIDs" type="epcisq:GetSubscriptionIDs"/>
  <xsd:complexType name="GetSubscriptionIDs">
    <xsd:sequence>
      <xsd:element name="queryName" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="GetSubscriptionIDsResult" type="epcisq:ArrayOfString"/>
  <xsd:element name="Poll" type="epcisq:Poll"/>
  <xsd:complexType name="Poll">
    <xsd:sequence>
      <xsd:element name="queryName" type="xsd:string"/>
      <xsd:element name="params" type="epcisq:QueryParams"/>
    </xsd:sequence>
  </xsd:complexType>
  <!--The response from a Poll method is the QueryResults element, defined below.
       The QueryResults element is also used to deliver standing query results
       through the Query Callback Interface-->
  <xsd:element name="GetStandardVersion" type="epcisq:EmptyParms"/>
  <xsd:element name="GetStandardVersionResult" type="xsd:string"/>
  <xsd:element name="GetVendorVersion" type="epcisq:EmptyParms"/>
  <xsd:element name="GetVendorVersionResult" type="xsd:string"/>
  <xsd:element name="VoidHolder" type="epcisq:VoidHolder"/>
  <xsd:complexType name="VoidHolder">
    <xsd:sequence></xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="EmptyParms"/>
  <xsd:complexType name="ArrayOfString">
    <xsd:sequence>
      <xsd:element name="string" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SubscriptionControls">
    <xsd:sequence>
      <xsd:element name="schedule" type="epcisq:QuerySchedule" minOccurs="0"/>
      <xsd:element name="trigger" type="xsd:anyURI" minOccurs="0"/>
      <xsd:element name="initialRecordTime" type="xsd:dateTime" minOccurs="0"/>
      <xsd:element name="reportIfEmpty" type="xsd:boolean"/>
      <xsd:element name="extension" type="epcisq:SubscriptionControlsExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="SubscriptionControlsExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="QuerySchedule">
    <xsd:sequence>
      <xsd:element name="second" type="xsd:string" minOccurs="0"/>
      <xsd:element name="minute" type="xsd:string" minOccurs="0"/>
      <xsd:element name="hour" type="xsd:string" minOccurs="0"/>
      <xsd:element name="dayOfMonth" type="xsd:string" minOccurs="0"/>
      <xsd:element name="month" type="xsd:string" minOccurs="0"/>
      <xsd:element name="dayOfWeek" type="xsd:string" minOccurs="0"/>
      <xsd:element name="extension" type="epcisq:QueryScheduleExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="QueryScheduleExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="QueryParams">
    <xsd:sequence>
      <xsd:element name="param" type="epcisq:QueryParam" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="QueryParam">
    <xsd:sequence>
      <xsd:element name="name" type="xsd:string"/>
      <!--See note in EPCIS spec text regarding the value for this element-->
      <xsd:element name="value" type="xsd:anyType"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="QueryResults" type="epcisq:QueryResults"/>
  <xsd:complexType name="QueryResults">
    <xsd:sequence>
      <xsd:element name="queryName" type="xsd:string"/>
      <xsd:element name="subscriptionID" type="xsd:string" minOccurs="0"/>
      <xsd:element name="resultsBody" type="epcisq:QueryResultsBody"/>
      <xsd:element name="extension" type="epcisq:QueryResultsExtensionType" minOccurs="0"/>
      <xsd:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:complexType name="QueryResultsExtensionType">
    <xsd:sequence>
      <xsd:any namespace="##local" processContents="lax" maxOccurs="unbounded"/>
    </xsd:sequence>
    <xsd:anyAttribute processContents="lax"/>
  </xsd:complexType>
  <xsd:complexType name="QueryResultsBody">
    <xsd:choice>
      <xsd:element name="EventList" type="epcis:EventListType"/>
      <xsd:element name="VocabularyList" type="epcis:VocabularyListType"/>
    </xsd:choice>
  </xsd:complexType>
  <!--EPCIS EXCEPTIONS-->
  <xsd:element name="EPCISException" type="epcisq:EPCISException"/>
  <xsd:complexType name="EPCISException">
    <xsd:sequence>
      <xsd:element name="reason" type="xsd:string"/>
    </xsd:sequence>
  </xsd:complexType>
  <xsd:element name="DuplicateNameException" type="epcisq:DuplicateNameException"/>
  <xsd:complexType name="DuplicateNameException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <!--QueryValidationException not implemented in EPCIS 1.0
  <xsd:element name="QueryValidationException" type="epcisq:QueryValidationException"/>
  <xsd:complexType name="QueryValidationException">
     <xsd:complexContent>
        <xsd:extension base="epcisq:EPCISException">
           <xsd:sequence/>
        </xsd:extension>
     </xsd:complexContent>
  </xsd:complexType>-->
  <xsd:element name="InvalidURIException" type="epcisq:InvalidURIException"/>
  <xsd:complexType name="InvalidURIException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="NoSuchNameException" type="epcisq:NoSuchNameException"/>
  <xsd:complexType name="NoSuchNameException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="NoSuchSubscriptionException" type="epcisq:NoSuchSubscriptionException"/>
  <xsd:complexType name="NoSuchSubscriptionException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="DuplicateSubscriptionException" type="epcisq:DuplicateSubscriptionException"/>
  <xsd:complexType name="DuplicateSubscriptionException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="QueryParameterException" type="epcisq:QueryParameterException"/>
  <xsd:complexType name="QueryParameterException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="QueryTooLargeException" type="epcisq:QueryTooLargeException"/>
  <xsd:complexType name="QueryTooLargeException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence>
          <xsd:element name="queryName" type="xsd:string" minOccurs="0"/>
          <xsd:element name="subscriptionID" type="xsd:string" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="QueryTooComplexException" type="epcisq:QueryTooComplexException"/>
  <xsd:complexType name="QueryTooComplexException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SubscriptionControlsException" type="epcisq:SubscriptionControlsException"/>
  <xsd:complexType name="SubscriptionControlsException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SubscribeNotPermittedException" type="epcisq:SubscribeNotPermittedException"/>
  <xsd:complexType name="SubscribeNotPermittedException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="SecurityException" type="epcisq:SecurityException"/>
  <xsd:complexType name="SecurityException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ValidationException" type="epcisq:ValidationException"/>
  <xsd:complexType name="ValidationException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:element name="ImplementationException" type="epcisq:ImplementationException"/>
  <xsd:complexType name="ImplementationException">
    <xsd:complexContent>
      <xsd:extension base="epcisq:EPCISException">
        <xsd:sequence>
          <xsd:element name="severity" type="epcisq:ImplementationExceptionSeverity"/>
          <xsd:element name="queryName" type="xsd:string" minOccurs="0"/>
          <xsd:element name="subscriptionID" type="xsd:string" minOccurs="0"/>
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:simpleType name="ImplementationExceptionSeverity">
    <xsd:restriction base="xsd:NCName">
      <xsd:enumeration value="ERROR"/>
      <xsd:enumeration value="SEVERE"/>
    </xsd:restriction>
  </xsd:simpleType>
</xsd:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://localhost:6060/axis/services/EPCglobalEPCISService</con:endpoint></con:endpoints><con:operation id="1a80c3af-f280-499b-b413-e0c0fc471605" isOneWay="false" action="" name="getQueryNames" bindingOperationName="getQueryNames" type="Request-Response" outputName="getQueryNamesResponse" inputName="getQueryNamesRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="3f063e63-d209-42f8-bba6-fd639f585df7" name="GetQueryNames request"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:54805/v1_2/query.svc</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:epcglobal:epcis-query:xsd:1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <urn:GetQueryNames/>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:username>admin</con:username><con:password>P@ssw0rd</con:password><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:epcglobal:epcis:wsdl:1/EPCISServicePortType/getQueryNamesRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="a890ec53-8170-4baf-b346-e55b8b5e24c8" isOneWay="false" action="" name="getStandardVersion" bindingOperationName="getStandardVersion" type="Request-Response" outputName="getStandardVersionResponse" inputName="getStandardVersionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="3c67b792-87a9-47de-98c7-a096964fd54d" name="GetStandardVersion request"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:54805/v1_2/query.svc</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:epcglobal:epcis-query:xsd:1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <urn:GetStandardVersion/>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:username>admin</con:username><con:password>P@ssw0rd</con:password><con:domain>FasTnT</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:epcglobal:epcis:wsdl:1/EPCISServicePortType/getStandardVersionRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="2d3ef7bd-f16a-40fd-85fc-0ea5b0c61e70" isOneWay="false" action="" name="getSubscriptionIDs" bindingOperationName="getSubscriptionIDs" type="Request-Response" outputName="getSubscriptionIDsResponse" inputName="getSubscriptionIDsRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="a156289f-589b-4715-9b2d-9bac2ec2133e" name="GetSubscriptionID request" useWsReliableMessaging="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:54805/v1_2/query.svc</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:epcglobal:epcis-query:xsd:1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <urn:GetSubscriptionIDs>\r
         <queryName>SimpleEventQuery</queryName>\r
      </urn:GetSubscriptionIDs>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:username>admin</con:username><con:password>P@ssw0rd</con:password><con:domain>FasTnT</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:epcglobal:epcis:wsdl:1/EPCISServicePortType/getSubscriptionIDsRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="2ba60cdd-d943-4345-8c20-694c4fb724dc" isOneWay="false" action="" name="getVendorVersion" bindingOperationName="getVendorVersion" type="Request-Response" outputName="getVendorVersionResponse" inputName="getVendorVersionRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="080770a4-2101-44d7-8388-689496fe4bcc" name="GetVendorVersion request"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:54805/v1_2/query.svc</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:epcglobal:epcis-query:xsd:1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <urn:GetVendorVersion/>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:username>admin</con:username><con:password>P@ssw0rd</con:password><con:domain/><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:epcglobal:epcis:wsdl:1/EPCISServicePortType/getVendorVersionRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="c6ef5132-3975-4d25-93ba-3431e11d4267" isOneWay="false" action="" name="poll" bindingOperationName="poll" type="Request-Response" outputName="pollResponse" inputName="pollRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="f5105a4b-fb40-4119-a356-e6fe6dba607c" name="Poll request"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:54805/v1_2/query.svc</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:epcglobal:epcis-query:xsd:1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <urn:Poll>\r
         <queryName>SimpleEventQuery</queryName>\r
         <params>\r
            <!--Zero or more repetitions:-->\r
            <param>\r
               <name>GE_eventTime</name>\r
               <value>2010-01-01T00:00:00Z</value>\r
            </param>\r
         </params>\r
      </urn:Poll>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:username>admin</con:username><con:password>P@ssw0rd</con:password><con:domain>FasTnT</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:epcglobal:epcis:wsdl:1/EPCISServicePortType/pollRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="89e5d8f2-3d4f-4d3e-8a71-87dee9134d3f" isOneWay="false" action="" name="subscribe" bindingOperationName="subscribe" type="Request-Response" outputName="subscribeResponse" inputName="subscribeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="1ba3091c-1311-4ca6-ad2e-7c5764887797" name="Subscribe request"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:54805/v1_2/query.svc</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:epcglobal:epcis-query:xsd:1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <urn:Subscribe>\r
         <queryName>SimpleEventQuery</queryName>\r
         <params>\r
         </params>\r
         <dest>http://localhost:54805/epcisservices/1.2/capture</dest>\r
         <controls>\r
            <schedule>\r
               <second>0</second>\r
               <minute>5</minute>\r
            </schedule>\r
            <reportIfEmpty>true</reportIfEmpty>\r
         </controls>\r
         <subscriptionID>TestSubscriptionId</subscriptionID>\r
      </urn:Subscribe>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:username>admin</con:username><con:password>P@ssw0rd</con:password><con:domain>FasTnT</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:epcglobal:epcis:wsdl:1/EPCISServicePortType/subscribeRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="e792ffaf-d7ce-480c-952d-86a7eadfafc8" isOneWay="false" action="" name="unsubscribe" bindingOperationName="unsubscribe" type="Request-Response" outputName="unsubscribeResponse" inputName="unsubscribeRequest" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d83ec6d5-d14e-4144-b2e0-38704a7d2002" name="Unsubscribe request"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://localhost:54805/v1_2/query.svc</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:epcglobal:epcis-query:xsd:1">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <urn:Unsubscribe>\r
         <subscriptionID>TestSubscriptionId</subscriptionID>\r
      </urn:Unsubscribe>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:username>admin</con:username><con:password>P@ssw0rd</con:password><con:domain>FasTnT</con:domain><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:preemptive>true</con:preemptive><con:authType>Preemptive</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:epcglobal:epcis:wsdl:1/EPCISServicePortType/unsubscribeRequest"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>